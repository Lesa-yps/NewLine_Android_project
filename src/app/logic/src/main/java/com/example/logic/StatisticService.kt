package com.example.logic

import java.time.LocalDate
import java.time.temporal.ChronoUnit
import kotlin.math.ceil
import com.example.models.TaskPriority.*
import com.example.models.Task
import com.example.models.TaskStatus
import java.time.DayOfWeek
import java.time.Duration
import java.math.BigDecimal
import java.math.RoundingMode
import java.time.format.TextStyle
import java.util.Locale
import java.util.logging.Logger


interface IStatisticService {
    // –†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    suspend fun calcStatisticWorkload(userId: Int): WorkloadStatistic
    // –†–∞—Å—á—ë—Ç –≤—Ä–µ–º—ë–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á (cycle time) –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    suspend fun calcStatisticCycleTime(userId: Int, categoryId: Int, percentiles: List<Percentile>): CycleTimeStatistic
}


class StatisticService(private val databaseService: IDatabaseService) : IStatisticService {

    private val logger = Logger.getLogger(StatisticService::class.java.name)

    // –†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    override suspend fun calcStatisticWorkload(userId: Int): WorkloadStatistic {
        logger.info("–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: $userId")

        val now = LocalDate.now()
        val nextWeekStart = now.plusDays(1) // –ó–∞–≤—Ç—Ä–∞
        val nextWeekEnd = now.plusDays(7)

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –¥–µ–¥–ª–∞–π–Ω –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        val tasks: List<Task> = databaseService.getTasks(userId) { task ->
            task.deadlineDate in nextWeekStart..nextWeekEnd && task.status != TaskStatus.DONE
        }

        logger.info("–ù–∞–π–¥–µ–Ω–æ ${tasks.size} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")

        val workloadByDay = mutableMapOf<DayOfWeek, Double>()
        DayOfWeek.entries.forEach { day -> workloadByDay[day] = 0.0 }

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –Ω–∞–≥—Ä—É–∑–æ–∫
        tasks.forEach { task ->
            val daysUntilDeadline = ChronoUnit.DAYS.between(nextWeekStart, task.deadlineDate).toInt()
            val dayOfWeek = nextWeekStart.plusDays(daysUntilDeadline.toLong()).dayOfWeek
            workloadByDay[dayOfWeek] = workloadByDay.getOrDefault(dayOfWeek, 0.0) + getWeight(task)
        }

        logger.info("–ó–∞–≤–µ—Ä—à—ë–Ω —Ä–∞—Å—á—ë—Ç –Ω–∞–≥—Ä—É–∑–∫–∏, –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

        return WorkloadStatistic(workloadByDay)
    }

    // –†–∞—Å—á—ë—Ç –≤—Ä–µ–º—ë–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á (cycle time) –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    override suspend fun calcStatisticCycleTime(userId: Int, categoryId: Int, percentiles: List<Percentile>): CycleTimeStatistic {
        logger.info("–ù–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º—ë–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $categoryId")

        val lastMonthStart = LocalDate.now().minusMonths(1)

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        val tasks: List<Task> = databaseService.getTasks(userId).filter { task ->
            task.status == TaskStatus.DONE && task.categoryId == categoryId && task.deadlineDate.isAfter(lastMonthStart)
        }

        logger.info("–ù–∞–π–¥–µ–Ω–æ ${tasks.size} –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ $categoryId")

        // –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ —Ä–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é
        val cycleTimes: List<Duration> = tasks.mapNotNull { it.getWorkTime() }.sorted()

        logger.info("–í—ã—á–∏—Å–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á, –Ω–∞—á–∞–ª–æ —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–π")

        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π (–±–µ—Ä—ë—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Å—Å–∏–≤–∞, –∏–ª–∏ 0, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å < 0)
        val percentileValues: Map<Percentile, Duration> = percentiles.associateWith { percentile ->
            val index = ceil(percentile.getValue() * cycleTimes.size).toInt() - 1
            if (index < 0) Duration.ZERO
            else cycleTimes.getOrElse(index) { cycleTimes.last() }
        }

        logger.info("–ó–∞–≤–µ—Ä—à—ë–Ω —Ä–∞—Å—á—ë—Ç –≤—Ä–µ–º—ë–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª–µ–π, –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

        return CycleTimeStatistic(cycleTimes, percentileValues)
    }

    // –†–∞—Å—á—ë—Ç –≤–µ—Å–∞ –∑–∞–¥–∞—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    private fun getWeight(task: Task): Double {
        val weightPriority = when (task.priority) {
            LOW -> 1.0
            MEDIUM -> 1.5
            HIGH -> 2.0
        }
        val daysUntilDeadline = ChronoUnit.DAYS.between(LocalDate.now(), task.deadlineDate).toDouble()
        val weight = BigDecimal(weightPriority / daysUntilDeadline).setScale(2, RoundingMode.HALF_UP).toDouble()

        logger.fine("–î–ª—è –∑–∞–¥–∞—á–∏ —Å id ${task.id} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –≤–µ—Å: $weight")

        return weight
    }
}


// –ö–ª–∞—Å—Å-–ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å
data class Percentile(private val value: Double) {
    init {
        require(value in 0.0..1.0) { "–ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1." }
    }

    fun getValue(): Double = value
}

// –ö–ª–∞—Å—Å, —Ö—Ä–∞–Ω—è—â–∏–π —Å–ª–æ–≤–∞—Ä—å –∏–∑ —Å–µ–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –≤–µ—Å–æ–≤ –Ω–∞–≥—Ä—É–∑–æ–∫ –ø–æ –¥–Ω—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∏—Ö –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏)
data class WorkloadStatistic(
    val workloadByDay: Map<DayOfWeek, Double>
) {
    fun getSortedWeekDays(): Map<DayOfWeek, Double> {
        val tomorrow = LocalDate.now().plusDays(1).dayOfWeek
        return workloadByDay.toSortedMap(compareBy { (it.ordinal - tomorrow.ordinal + 7) % 7 })
    }

    fun getWorkloadReport(): String {
        val sb = StringBuilder()
        sb.appendLine("üìä –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:")

        getSortedWeekDays().forEach { (day, load) ->
            val loadBar = "‚ñà".repeat((load * 2 * 5).toInt().coerceAtMost(20)) // –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤
            val formattedLoad = String.format(Locale.US, "%.2f", load)
            sb.appendLine("${day.name.padEnd(10)} | $loadBar ($formattedLoad)")
        }

        return sb.toString()
    }

    fun getRecommendations(): String {
        val overloadedDays = workloadByDay.filterValues { it > 1.0 }

        val recommendation = StringBuilder("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")

        if (overloadedDays.isNotEmpty()) {
            val minLoadDays = workloadByDay
                .filterValues { it <= 1.0 }
                .toList()
                .sortedBy { it.second }
                .joinToString(", ") { it.first.toRussianShort() }

            overloadedDays.forEach { (day, load) ->
                recommendation.appendLine("‚ö†Ô∏è ${day.toRussianFull()}: –Ω–∞–≥—Ä—É–∑–∫–∞ $load ‚Äî —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è.")
                recommendation.appendLine("   ‚û§ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–Ω–∏ —Å –º–µ–Ω—å—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π (${minLoadDays.ifEmpty { "–Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–Ω–µ–π" }}).")
            }
        }

        if (overloadedDays.size >= 4) {
            recommendation.appendLine("\nüî• –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏.")
            recommendation.appendLine("   ‚û§ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        } else if (overloadedDays.isEmpty()) {
            recommendation.appendLine("‚úÖ –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ: –Ω–∏ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.")
        } else {
            recommendation.appendLine("üü° –í —Ü–µ–ª–æ–º –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–Ω–∏.")
        }

        return recommendation.toString()
    }
}

// –ö–ª–∞—Å—Å, —Ö—Ä–∞–Ω—è—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –≤—Ä–µ–º—ë–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å - –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
data class CycleTimeStatistic(
    val cycleTimes: List<Duration>,
    val percentileValues: Map<Percentile, Duration>
) {
    override fun toString(): String {
        val formattedCycleTimes = cycleTimes.joinToString(", ") { it.toHumanReadable() }

        val formattedPercentiles = percentileValues.entries.joinToString("\n") { (percentile, duration) ->
            "${(percentile.getValue() * 100).toInt()}% –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${duration.toHumanReadable()} –∏–ª–∏ –º–µ–Ω—å—à–µ"
        }

        return "–í—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á: [$formattedCycleTimes]\n–ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏:\n$formattedPercentiles"
    }

    fun getCycleTimeReport(): String {
        val sb = StringBuilder()
        sb.appendLine("‚è±Ô∏è –í—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á:")

        if (cycleTimes.isEmpty()) {
            sb.appendLine("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.")
        } else {
            sb.appendLine(cycleTimes.joinToString(", ") { it.toHumanReadable() })

            sb.appendLine("üìå –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏:")
            percentileValues.entries
                .sortedBy { it.key.getValue() }
                .forEach { (percentile, duration) ->
                    sb.appendLine("‚Ä¢ ${"%.0f".format(percentile.getValue() * 100)}% –∑–∞–¥–∞—á ‚Äî ${duration.toHumanReadable()} –∏–ª–∏ –º–µ–Ω—å—à–µ")
                }
        }

        return sb.toString()
    }

    fun getRecommendations(): String {
        val sb = StringBuilder("üìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")

        if (cycleTimes.isEmpty()) {
            sb.appendLine("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return sb.toString()
        }

        val durationsMillis = cycleTimes.map { it.toMillis() }
        val average = durationsMillis.average()
        val stdDev = kotlin.math.sqrt(durationsMillis.map { (it - average).let { d -> d * d } }.average())

        val highThresholdMillis = Duration.ofDays(2).toMillis()
        if (average > highThresholdMillis) {
            sb.appendLine("‚è≥ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤—ã—Å–æ–∫–æ–µ (${Duration.ofMillis(average.toLong()).toHumanReadable()}).")
            sb.appendLine("   ‚û§ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—ë–º –∑–∞–¥–∞—á –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        }

        if (stdDev > average / 2) {
            sb.appendLine("üìâ –ë–æ–ª—å—à–æ–π —Ä–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (œÉ = ${Duration.ofMillis(stdDev.toLong()).toHumanReadable()}).")
            sb.appendLine("   ‚û§ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: –¥—Ä–æ–±–∏—Ç—å –∫—Ä—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã.")
        }

        return sb.toString()
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Duration –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
fun Duration.toHumanReadable(): String {
    val hours = this.toHours()
    val minutes = this.minusHours(hours).toMinutes()

    return when {
        hours > 0 && minutes > 0 -> "$hours —á $minutes –º–∏–Ω"
        hours > 0 -> "$hours —á"
        else -> "$minutes –º–∏–Ω"
    }
}

// –ü–µ—Ä–µ–≤–æ–¥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
// –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫...)
fun DayOfWeek.toRussianFull(): String =
    getDisplayName(TextStyle.FULL, Locale.forLanguageTag("ru"))

// –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–Ω, –≤—Ç...)
fun DayOfWeek.toRussianShort(): String =
    getDisplayName(TextStyle.SHORT, Locale.forLanguageTag("ru"))